// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @map("email")
  password  String  @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userInfos UserInfos?
  posts     Posts[]
  comments  Comments[]
  userHistories UserHistories[] // 사용자(Users) 테이블과 사용자 히스토리(UserHistories) 테이블이 1:N 관계를 맺습니다.

  @@map("Users")
}

model Posts {
  postId    Int       @id @default(autoincrement()) @map("postId")
  userId    Int       @map("userId")
  title     String    @map("title")
  content   String    @map("content") @db.Text
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comments Comments[]

  @@map("Posts")
}

model UserInfos {
  userInfoId    Int       @id @default(autoincrement()) @map("userInfoId")
  userId        Int       @unique @map("userId")
  name          String    @map("name")
  age           Int?      @map("age")
  gender        String    @map("gender")
  profileImage  String?   @map("profileImage")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

model Comments {
  commentId     Int       @id @default(autoincrement()) @map("commentIds")
  postId        Int       @map("postId")
  userId        Int       @map("userId")
  content       String    @map("content")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")

  post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Comments")
}

model UserHistories {
  userHistoryId String   @id @default(uuid()) @map("userHistoryId")
  userId        Int      @map("userId") // 사용자(Users) 테이블을 참조하는 외래키
  changedField  String   @map("changedField") // 변경된 필드명
  oldValue      String?  @map("oldValue") // 변경 전 값
  newValue      String   @map("newValue") // 변경 후 값
  changedAt     DateTime @default(now()) @map("changedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserHistories")
}